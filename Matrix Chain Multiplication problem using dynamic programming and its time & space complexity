# Dynamic Programming Python implementation of Matrix Chain Multiplication
import sys

# Matrix Ai has dimension p[i-1] x p[i] for i = 1..n
def MatrixChainOrder(p, n):

m = [[0 for x in range(n)] for x in range(n)]

	for i in range(1, n):
		m[i][i] = 0

	for L in range(2, n):
		for i in range(1, n-L + 1):
			j = i + L-1
			m[i][j] = sys.maxsize
			for k in range(i, j):

				# q = cost / scalar multiplications
				q = m[i][k] + m[k + 1][j] + p[i-1]*p[k]*p[j]
				if q < m[i][j]:
					m[i][j] = q

	return m[1][n-1]
  
arr = [1, 2, 3, 4, 3]
size = len(arr)

print("Minimum number of multiplications is " +
	str(MatrixChainOrder(arr, size)))


*********************************************************************************************************
                   Time and Space complexity of a Dynammic Programming implementation
                   
Time Complexity: O(N3 )
Auxiliary Space: O(N2)

                   Time and Space complexity of a naive recursive implementation
                    
Time complexity: The time complexity of the algorithm is O(n^3) where n is the number of
 matrices in the chain. This is because we have three nested loops and each loop runs n times.
 
 Space complexity: The space complexity of the algorithm is O(n^2) because we are using a
 we are using a two-dimensional array to store the intermediate results. The size of the array is n x n
      
