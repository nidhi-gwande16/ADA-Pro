//LCS problem using dynamic programming in c
#include <bits/stdc++.h>
using namespace std;

int lcs(string X, string Y, int m, int n)
{
	int L[m + 1][n + 1];

	for (int i = 0; i <= m; i++) {
		for (int j = 0; j <= n; j++) {
			if (i == 0 || j == 0)
				L[i][j] = 0;

			else if (X[i - 1] == Y[j - 1])
				L[i][j] = L[i - 1][j - 1] + 1;

			else
				L[i][j] = max(L[i - 1][j], L[i][j - 1]);
		}
	}
	return L[m][n];
}

int main()
{
	string S1 = "AGGTAB";
	string S2 = "GXTXAYB";
	int m = S1.size();
	int n = S2.size();

	cout << "Length of LCS is " << lcs(S1, S2, m, n);

	return 0;
}


*********************************************************************************************************************
                              Time and Space complexity of LCS

Let us count the total subsequences with lengths 1, 2, . . . , n-1, n.
From theory of permutation and combination we know number of combinations with 1 element is nC1. Number of combinations with 2 elements are nC2 and so on. 
So a string of length n has nC1 + nC2 + . . . nCn = 2n-1 different possible subsequences.
Each subsequence takes O(n) time to compare.
Auxiliary Space: O(n) As we can reuse the same string.
